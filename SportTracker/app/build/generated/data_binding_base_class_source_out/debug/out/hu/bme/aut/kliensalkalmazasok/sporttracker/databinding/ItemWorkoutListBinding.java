// Generated by view binder compiler. Do not edit!
package hu.bme.aut.kliensalkalmazasok.sporttracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import hu.bme.aut.kliensalkalmazasok.sporttracker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemWorkoutListBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox cbIsCompleted;

  @NonNull
  public final ImageButton ibEdit;

  @NonNull
  public final ImageButton ibRemove;

  @NonNull
  public final ImageView ivIcon;

  @NonNull
  public final TextView tvDate;

  @NonNull
  public final TextView tvDescription;

  @NonNull
  public final TextView tvDuration;

  @NonNull
  public final TextView tvType;

  private ItemWorkoutListBinding(@NonNull LinearLayout rootView, @NonNull CheckBox cbIsCompleted,
      @NonNull ImageButton ibEdit, @NonNull ImageButton ibRemove, @NonNull ImageView ivIcon,
      @NonNull TextView tvDate, @NonNull TextView tvDescription, @NonNull TextView tvDuration,
      @NonNull TextView tvType) {
    this.rootView = rootView;
    this.cbIsCompleted = cbIsCompleted;
    this.ibEdit = ibEdit;
    this.ibRemove = ibRemove;
    this.ivIcon = ivIcon;
    this.tvDate = tvDate;
    this.tvDescription = tvDescription;
    this.tvDuration = tvDuration;
    this.tvType = tvType;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemWorkoutListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemWorkoutListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_workout_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemWorkoutListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cbIsCompleted;
      CheckBox cbIsCompleted = ViewBindings.findChildViewById(rootView, id);
      if (cbIsCompleted == null) {
        break missingId;
      }

      id = R.id.ibEdit;
      ImageButton ibEdit = ViewBindings.findChildViewById(rootView, id);
      if (ibEdit == null) {
        break missingId;
      }

      id = R.id.ibRemove;
      ImageButton ibRemove = ViewBindings.findChildViewById(rootView, id);
      if (ibRemove == null) {
        break missingId;
      }

      id = R.id.ivIcon;
      ImageView ivIcon = ViewBindings.findChildViewById(rootView, id);
      if (ivIcon == null) {
        break missingId;
      }

      id = R.id.tvDate;
      TextView tvDate = ViewBindings.findChildViewById(rootView, id);
      if (tvDate == null) {
        break missingId;
      }

      id = R.id.tvDescription;
      TextView tvDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvDescription == null) {
        break missingId;
      }

      id = R.id.tvDuration;
      TextView tvDuration = ViewBindings.findChildViewById(rootView, id);
      if (tvDuration == null) {
        break missingId;
      }

      id = R.id.tvType;
      TextView tvType = ViewBindings.findChildViewById(rootView, id);
      if (tvType == null) {
        break missingId;
      }

      return new ItemWorkoutListBinding((LinearLayout) rootView, cbIsCompleted, ibEdit, ibRemove,
          ivIcon, tvDate, tvDescription, tvDuration, tvType);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
